---
description: Project stack
globs: "**/*.{ts,tsx,js,jsx}"
alwaysApply: true
---
# LifeBender - Cursor Rules

## Project Overview

This is an offline-first multi-app platform built with Bun, Vite, React, TypeScript, PGLite, and Ultracite. The app prioritizes security with end-to-end encryption and modular architecture.

## Technology Stack

- **Runtime**: Bun (not Node.js)
- **Build Tool**: Vite
- **Frontend**: React + TypeScript
- **UI Library**: HeroUI for beautiful, accessible React components
- **Routing**: TanStack Router for type-safe routing with built-in data fetching
- **Styling**: Tailwind CSS for utility-first styling
- **Component Development**: Storybook for development and testing
- **Database**: PGLite (SQLite-compatible with PostgreSQL syntax)
- **ORM**: Drizzle with full PGLite support and migrations
- **Validation**: Zod for type-safe schema validation
- **Desktop**: Tauri for cross-platform deployment
- **Linting**: Ultracite
- **Encryption**: End-to-end encryption for sensitive data

## Architecture Patterns

### Multi-App Structure

- Each sub-app should be self-contained
- Use shared core services for common functionality
- Implement proper data isolation between apps
- Use consistent routing patterns

### Encryption Layer

- Separate encryption logic from business logic
- Use app-specific encryption keys
- Implement proper key management
- Handle encryption/decryption errors gracefully

### Offline-First & Mobile-First

- All functionality must work offline
- Implement proper offline indicators
- Use local storage for offline data
- Plan for future sync capabilities
- Design for mobile screens and touch interactions
- Use large touch targets and gesture navigation
- Optimize for small screen layouts

### TanStack Router File-Based Routing

- Use `src/routes/` directory for all route files
- Create `__root.tsx` for the root layout with HeroUI provider
- Use `createFileRoute()` for each route component
- Follow file naming conventions: `index.tsx`, `about.tsx`, `money-manager.tsx`
- Use `Route.useLoaderData()` for type-safe data access
- Implement loaders for data fetching with proper error handling
- Use `Outlet` component for nested layouts
- Leverage auto-generated `routeTree.gen.ts` for type safety

## Multi-App Structure with TanStack Router

This project uses a modular, file-based routing approach to support multiple sub-applications ("apps") within a single platform. Each app is self-contained and leverages TanStack Router for type-safe, scalable navigation.

### Directory Structure

```
src/
├── main.tsx
├── routeTree.gen.ts
├── routes/
│   ├── __root.tsx                # Root layout (global providers, navigation)
│   ├── index.tsx                 # Home page
│   ├── _authenticated.tsx        # (Optional) Authenticated layout for protected routes
│   ├── login.tsx                 # Login page
│   ├── not-found.tsx             # 404 page
│   ├── money-manager/            # Money Manager app
│   │   ├── index.tsx             # Money Manager dashboard
│   │   ├── accounts.tsx          # Accounts list
│   │   ├── transactions.tsx      # Transactions list
│   │   ├── budget.tsx            # Budget tracking
│   │   └── ...                   # Other money-manager features
│   └── todo/                     # Todo app
│       ├── index.tsx             # Todo dashboard
│       ├── tasks.tsx             # Task list
│       ├── categories.tsx        # Task categories
│       └── ...                   # Other todo features
├── components/                   # Shared UI components
├── core/                         # Shared services (auth, crypto, db, etc.)
├── apps/                         # (Optional) App-specific business logic
├── utils/                        # Utility functions
├── types/                        # TypeScript types
```

### Routing Patterns

- **Root Layout (`__root.tsx`)**: Global providers, navigation, error boundaries.
- **Sub-App Entry Points**: Each app has its own directory under `routes/` with an `index.tsx` as the dashboard/landing page.
- **Nested Features**: App-specific features are additional files within each app’s directory.
- **Authentication**: Use `_authenticated.tsx` as a layout route to wrap all protected routes. Implement `beforeLoad` for auth checks.
- **Error Handling**: Use `not-found.tsx` for 404s and error boundaries in root or app layouts.

### Example Route URLs

- `/` → Home
- `/login` → Login
- `/money-manager` → Money Manager dashboard
- `/money-manager/accounts` → Accounts list
- `/money-manager/transactions` → Transactions
- `/todo` → Todo dashboard
- `/todo/tasks` → Task list
- `/todo/categories` → Task categories

### Best Practices

- **Isolation**: Each app’s routes, components, and logic are isolated in their own directory.
- **Shared Core**: Use `core/` for shared services and `components/` for shared UI.
- **Type Safety**: Leverage TanStack Router’s type-safe loaders, params, and search params.
- **Code Splitting**: File-based routing enables automatic code splitting for each app and feature.
- **Offline-First**: All apps should work offline, using local storage and proper offline indicators.
- **Mobile-First**: Design all components and layouts for mobile usability.

### Extending the Platform

- **Add New Apps**: Create a new directory under `routes/` (e.g., `notes/`, `passwords/`) and follow the same structure.
- **App-Specific Providers**: Use layout routes (e.g., `money-manager/_layout.tsx`) for app-specific context/providers.
- **Protected Apps**: Place sensitive apps under `_authenticated/` or use `beforeLoad` in their entry points.

### Documentation References

- See `.cursor/rules/tanstack-react-router_guide.mdc` for advanced routing, authentication, and code splitting patterns.

### Naming Conventions

- Use PascalCase for components and interfaces
- Use camelCase for functions and variables
- Use kebab-case for file names
- Use UPPER_SNAKE_CASE for constants

## Development Guidelines

### Performance & Mobile Optimization

- Optimize for fast startup (< 2 seconds)
- Keep memory usage under 500MB
- Use lazy loading for sub-apps
- Implement proper caching strategies
- Optimize for mobile performance and battery life
- Minimize bundle size for faster loading
- Use efficient touch interactions

### Testing

- Write unit tests for core services
- Test encryption/decryption thoroughly
- Test offline functionality
- Create Storybook stories for component testing
- Use visual regression testing for UI components
- Maintain 90%+ coverage for core services

### Error Handling

- Implement proper error boundaries
- Use typed error handling
- Provide user-friendly error messages
- Log errors appropriately (no sensitive data)

## Security Requirements

### Encryption Implementation

- Use AES-256-GCM for data encryption
- Implement proper key derivation
- Secure key storage with hardware backing when available
- Support key rotation without data loss

### Data Classification

- **Sensitive**: Financial data, personal notes, passwords
- **Non-Sensitive**: UI preferences, app settings
- Encrypt all sensitive data at rest
- Implement proper access controls

## Code Quality

### Linting (Ultracite)

- Follow Ultracite recommendations
- Address all linting warnings
- Maintain consistent code style
- Use AI-powered code quality suggestions

### Documentation

- Document complex functions and classes
- Include JSDoc comments for public APIs
- Maintain up-to-date README
- Document security considerations

## Specific Requirements

### Money Manager App

- Encrypt all financial data
- Implement proper transaction categorization
- Support multiple account types
- Provide budget tracking features

### Todo App

- Implement task management features
- Support categories and priorities
- Include due date tracking
- Provide search and filtering

## Common Patterns

### Database Operations (Drizzle + PGLite)

```typescript
// Use Drizzle for type-safe database operations
import { drizzle } from "drizzle-orm/pglite";
import { migrate } from "drizzle-orm/pglite/migrator";

// Schema definition with Zod validation
import { z } from "zod";
import { pgTable, text, integer } from "drizzle-orm/pg-core";

// Use transactions for multi-step operations
const transaction = await db.transaction(async (tx) => {
  // Database operations with type safety
  return result;
});
```

### Encryption Operations

```typescript
// Always handle encryption errors
try {
  const encrypted = await encryptService.encrypt(data, key);
  return encrypted;
} catch (error) {
  // Log error (no sensitive data)
  throw new EncryptionError("Failed to encrypt data");
}
```

### Component Structure (Mobile-First with HeroUI + Tailwind)

```typescript
import { Button, Card, Input } from "@heroui/react";

interface ComponentProps {
  // Define props interface with Zod validation
}

export const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // Mobile-first component with HeroUI + Tailwind CSS
  return (
    <Card className="p-4 rounded-lg bg-white shadow-sm touch-manipulation">
      <Input 
        placeholder="Enter text..."
        className="w-full"
        size="lg"
      />
      <Button 
        color="primary"
        size="lg"
        className="w-full mt-4"
      >
        Submit
      </Button>
    </Card>
  );
};

// Storybook story for component testing
export default {
  title: "Components/Component",
  component: Component,
  parameters: {
    viewport: { defaultViewport: "mobile1" },
  },
} as Meta;

export const Default: Story<ComponentProps> = (args) => <Component {...args} />;
```

## Avoid

- Logging sensitive information
- Storing keys in plain text
- Using synchronous encryption operations
- Mixing business logic with UI logic
- Hardcoding configuration values
- Small touch targets for mobile
- Complex desktop-only interactions
- Heavy animations that drain battery
- Custom CSS when Tailwind utilities exist
- Components without Storybook stories
- Non-responsive design patterns
- Using custom components when HeroUI components exist
- Creating custom routing logic instead of using TanStack Router
- Not using HeroUI's built-in accessibility features
- Ignoring TanStack Router's type-safe data fetching capabilities

## Remember

- Security is the top priority
- Offline functionality is required
- Mobile-first design is essential
- Performance matters for user experience
- Type safety prevents runtime errors
- Modular design enables scalability
- Touch interactions should be intuitive
- Battery optimization is important
- Use Tailwind for consistent styling
- Create Storybook stories for all components
- Design system ensures UI consistency
- Use HeroUI components for consistent, accessible UI
- Leverage TanStack Router's type-safe routing and data fetching
- HeroUI provides built-in dark mode and theming
- TanStack Router enables offline-first navigation patterns
- HeroUI Provider should wrap the entire app in `__root.tsx`
- Use TanStack Router's file-based routing for automatic code splitting
- Combine HeroUI's theming with TanStack Router's navigation state
- Implement proper loading states with HeroUI components
- Use TanStack Router's search params for app state management
- Use TanStack Router's file-based routing for automatic code splitting
- Combine HeroUI's theming with TanStack Router's navigation state
- Implement proper loading states with HeroUI components
- Use TanStack Router's search params for app state management
